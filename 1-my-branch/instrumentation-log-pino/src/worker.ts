import {
  appendDefaultInterceptors,
  DefaultLogger,
  defaultSinks,
  Logger,
  LogLevel,
  LogMetadata,
  makeTelemetryFilterString,
  Runtime,
  Worker,
} from '@temporalio/worker';
import * as activities from './activities';
import { ActivityInboundLogInterceptor } from './activities/interceptors';
import pino, {BaseLogger} from "pino";

const logger =  pino();


async function main() {
  // Create loggers with different labels for the separate components
  const workerWinstonLogger = logger.child({ label: 'worker' });
  const workflowWinstonLogger = logger.child({ label: 'workflow' });
  const activityWinstonLogger = logger.child({ label: 'activity' });






  // @@@SNIPSTART typescript-core-telemetry-options
  // Configure Rust Core runtime to export SDK logs, metrics and (optionally) internal traces
  Runtime.install({
    // Install a logger to collect logs generated by Node.js Workers and Rust Core.
      //logger,
  });
  // @@@SNIPEND

  const worker = await Worker.create({
    workflowsPath: require.resolve('./workflows'),
    activities,
    taskQueue: 'instrumentation',
    sinks: defaultSinks(),
  });
  // @@@SNIPEND
  await worker.run();
}

main().then(
  () => void process.exit(0),
  (err) => {
    logger.error('Process failed', err);
    process.exit(1);
  }
);
